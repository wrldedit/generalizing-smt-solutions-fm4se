/*
 * This source file was generated by the Gradle 'init' task
 */
package generalizing.smt.solutions.fm4se;

import com.microsoft.z3.*;

public class App {
    public static void main(String[] args) {
        try (Context ctx = new Context()) {
            // Create boolean variables
            BoolExpr p = ctx.mkBoolConst("p");
            BoolExpr q = ctx.mkBoolConst("q");
            BoolExpr r = ctx.mkBoolConst("r");

            // Create a simple formula with basic boolean relationships:
            // 1. p -> q (if p is true, q must be true)
            // 2. q <-> r (q and r are equivalent)
            BoolExpr formula = ctx.mkAnd(
                ctx.mkImplies(p, q),    // p -> q
                ctx.mkIff(q, r)         // q <-> r
            );

            System.out.println("Test Formula:");
            System.out.println("1. p -> q");
            System.out.println("2. q <-> r");
            System.out.println("\nThis formula has these properties:");
            System.out.println("- p implies q, but not vice versa");
            System.out.println("- q and r are equivalent (always have the same value)");
            System.out.println("- due to q <-> r, p -> q is equivalent to p -> r");
            System.out.println("\nOriginal formula: " + formula);

            // Launch interactive analyzer
            SMTConnector connector = new SMTConnector(ctx);
            InteractiveAnalyzer analyzer = new InteractiveAnalyzer(connector);
            analyzer.runInteractiveSession(formula);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


