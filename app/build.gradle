/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // Add Sonatype snapshots repository
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)  // Change to Java 17
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // SMT solver
    implementation 'org.sosy-lab:java-smt:3.14.3'
    implementation files('libs/com.microsoft.z3.jar')
    
    // JFreeChart for visualization
    implementation 'org.jfree:jfreechart:1.5.4'
}

application {
    // Define the main class for the application.
    mainClass = 'generalizing.smt.solutions.fm4se.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

task copyNativeLibs(type: Copy) {
    from "${projectDir}/libs"
    include "*.dll", "*.so", "*.dylib"
    into "$buildDir/libs"
}

tasks.named('run').configure {
    dependsOn 'classes'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'java.library.path', "${projectDir}/libs"
    doFirst {
        copy {
            from "${projectDir}/libs"
            include "*.dll", "*.so", "*.dylib"
            into "${buildDir}/libs"
        }
    }
}

tasks.named('distZip') {
    dependsOn copyNativeLibs
}

tasks.named('distTar') {
    dependsOn copyNativeLibs
}

tasks.named('startScripts') {
    dependsOn copyNativeLibs
}
