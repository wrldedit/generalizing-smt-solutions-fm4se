/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // Add Sonatype snapshots repository
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    // SMT solver
    implementation 'org.sosy-lab:java-smt:3.14.3'
    
    // Remove the Z3 Maven dependency since we're using the local jar
    // implementation 'com.microsoft.z3:z3:4.8.9'  // Remove this line
    implementation files('libs/com.microsoft.z3.jar')
    implementation files('C:/Users/Fritz Trede/z3-4.8.9-x64-win/bin/com.microsoft.z3.jar')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'generalizing.smt.solutions.fm4se.App'
    
    // Update the JVM args to include both paths
    applicationDefaultJvmArgs = [
        "-Djava.library.path=C:/Users/Fritz Trede/z3-4.8.9-x64-win/bin"
    ]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Add this task to copy native libraries
tasks.register('copyNativeLibs', Copy) {
    from "C:/Users/Fritz Trede/z3-4.8.9-x64-win/bin"
    include "*.dll"
    into "${buildDir}/libs"
}

tasks.named('run') {
    dependsOn 'copyNativeLibs'
}

tasks.withType(AbstractArchiveTask) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
